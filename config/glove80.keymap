/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3
#define SHORT_COMBO_TIMEOUT 18
#define COMBO_TIMEOUT_LEFT 25
#define PRIOR_IDLE_COMBO 150
#define HOME_ROW_MOD_IDLE 150
#define MOD_FLAVOR "balanced"

&sk { quick-release; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HOME_ROW_MOD_IDLE>;
            flavor = MOD_FLAVOR;
            hold-trigger-key-positions = <55 56 57 73 74 72 79 78 62 63 45 44 33 32 21 20 9 8 7 19 31 43 77 76 60 61 42 30 18 6 5 17 29 41 75 58 40 59 28 16 52 53 54 71 70 69>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HOME_ROW_MOD_IDLE>;
            flavor = MOD_FLAVOR;
            hold-trigger-key-positions = <54 71 70 53 52 69 68 51 50 38 39 27 26 14 4 15 3 13 25 37 49 67 66 36 24 12 2 1 11 23 35 47 48 65 64 46 34 22 10 0 55 56 57 74 73 72>;
        };

        hml_shift: hml_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <55 56 57 73 74 72 79 78 62 63 45 44 33 32 21 20 9 8 7 19 31 43 77 76 60 61 42 30 18 6 5 17 29 41 75 58 40 59 28 16 52 53 54 71 70 69>;
            hold-trigger-on-release;
        };

        hmr_shift: hmr_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <54 71 70 53 52 69 68 51 50 38 39 27 26 14 4 15 3 13 25 37 49 67 66 36 24 12 2 1 11 23 35 47 48 65 64 46 34 22 10 0 55 56 57 74 73 72>;
            hold-trigger-on-release;
        };

        sticky_shift: sticky_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_SHIFT";
            bindings = <&sk>;
            #binding-cells = <1>;
            release-after-ms = <300>;
            quick-release;
        };

        lt_left: lt_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <55 56 57 73 74 72 79 78 62 63 45 44 33 32 21 20 9 8 7 19 31 43 77 76 60 61 42 30 18 6 5 17 29 41 75 58 40 59 28 16 52 53 54 71 70 69>;
            hold-trigger-on-release;
        };

        lt_right: lt_right {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <54 71 70 53 52 69 68 51 50 38 39 27 26 14 4 15 3 13 25 37 49 67 66 36 24 12 2 1 11 23 35 47 48 65 64 46 34 22 10 0 55 56 57 74 73 72>;
            hold-trigger-on-release;
        };

        shifty: shifty {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTY";
            bindings = <&sticky_shift LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        layer_left: layer_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <55 56 57 73 74 72 79 78 62 63 45 44 33 32 21 20 9 8 7 19 31 43 77 76 60 61 42 30 18 6 5 17 29 41 75 58 40 59 28 16 52 53 54 71 70 69>;
        };

        layer_right: layer_right {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <54 71 70 53 52 69 68 51 50 38 39 27 26 14 4 15 3 13 25 37 49 67 66 36 24 12 2 1 11 23 35 47 48 65 64 46 34 22 10 0 55 56 57 74 73 72>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";
        require-prior-idle-ms = <PRIOR_IDLE_COMBO>;

        left_parent {
            bindings = <&hmr RS(RIGHT_CONTROL) LEFT_PARENTHESIS>;
            key-positions = <41 42>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        right_paren {
            bindings = <&hmr RC(RIGHT_ALT) RIGHT_PARENTHESIS>;
            key-positions = <42 43>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <29 30>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <30 31>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <59 60>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <60 61>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        underscore {
            bindings = <&hmr LC(LEFT_ALT) UNDERSCORE>;
            key-positions = <37 36>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        dash {
            bindings = <&hmr LS(LEFT_CONTROL) MINUS>;
            key-positions = <38 37>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <26 25>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <25 24>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <39 38>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <35 36>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        bang {
            bindings = <&kp EXCLAMATION>;
            key-positions = <23 24>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <47 48>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        star {
            bindings = <&kp ASTERISK>;
            key-positions = <31 32>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <62 61>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <26 27>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        lessthan {
            bindings = <&kp LESS_THAN>;
            key-positions = <50 51>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        greaterthan {
            bindings = <&kp GREATER_THAN>;
            key-positions = <58 59>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        qmark {
            bindings = <&kp QUESTION>;
            key-positions = <43 44>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2           &kp F3           &kp F4               &kp F5                                                                                               &kp F6              &kp F7                &kp F8            &kp F9                    &mt F11 F10
&kp EQUAL   &kp N1           &kp N2           &kp N3               &kp N4             &kp N5                                                                    &kp N6  &kp N7              &kp N8                &kp N9            &kp N0                    &kp MINUS
&kp DEL     &kp Q            &kp W            &kp E                &kp R              &kp T                                                                     &kp Y   &kp U               &kp I                 &kp O             &kp P                     &kp BSLH
&kp ESC     &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G                                                                     &kp H   &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp SQT
&kp GRAVE   &lt_left 4 Z     &kp X            &kp C                &kp V              &kp B   &shifty    &shifty  &layer_td  &shifty  &kp RCTRL      &shifty    &kp N   &kp M               &kp COMMA             &kp DOT           &lt_right 4 SLASH         &kp PG_UP
&magic 2 0  &kp HOME         &kp END          &kp LEFT             &kp RIGHT                  &kp ENTER  &kp TAB  &shifty    &shifty  &kp BACKSPACE  &kp SPACE          &kp UP              &kp DOWN              &kp LBKT          &kp RBKT                  &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &to 3
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 5
            >;
        };

        gaming {
            bindings = <
&kp ESC    &kp F2    &trans   &trans    &trans                                                                                          &trans  &trans     &trans    &trans     &trans
&kp GRAVE  &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                       &kp N6  &kp N7  &kp N8     &kp N9    &kp N0     &kp MINUS
&kp TAB    &kp Q     &kp W    &kp E     &kp R      &kp T                                                                        &kp Y   &kp U   &kp I      &kp O     &kp P      &kp BSLH
&kp CLCK   &kp A     &kp S    &kp D     &kp F      &kp G                                                                        &kp H   &kp J   &kp K      &kp L     &kp SEMI   &kp SQT
&kp LSHFT  &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LALT   &kp LCTRL  &kp LCTRL  &to 0     &kp RIGHT_WIN  &kp RSHFT  &kp N   &kp M   &kp COMMA  &kp DOT   &kp SLASH  &kp PAGE_UP
&kp LALT   &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp LCTRL  &kp SPACE  &kp RET    &kp RALT  &kp BSPC       &kp SPACE          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT   &kp PG_DN
            >;
        };

        symbols {
            bindings = <
&trans  &trans        &trans           &trans     &trans                                                                                &trans                &trans                 &trans          &trans           &trans
&trans  &trans        &trans           &trans     &trans            &trans                                                      &trans  &trans                &trans                 &trans          &trans           &trans
&trans  &kp ASTERISK  &kp AT_SIGN      &kp HASH   &kp AMPERSAND     &trans                                                      &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp MINUS       &kp UNDERSCORE   &trans
&trans  &kp CARET     &kp EXCLAMATION  &kp EQUAL  &kp GREATER_THAN  &kp DOLLAR                                                  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans
&trans  &trans        &kp PERCENT      &kp PLUS   &kp LESS_THAN     &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                &trans                 &trans          &trans           &trans
&trans  &trans        &trans           &trans     &trans                        &trans  &trans  &trans  &trans  &trans  &trans          &trans                &trans                 &trans          &trans           &trans
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &kp BSPC  &kp N0          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
